package biliruben.tools.xml.tcx.object;

import org.xml.sax.Attributes;

import com.biliruben.tools.xml.XmlUtil;

public class Build extends AbstractTcxObject {

    /*
     * 
     <xsd:complexType name="Build_t">
        <xsd:sequence>
            <xsd:element name="Version" type="Version_t"/>
            <xsd:element name="Type" type="BuildType_t" minOccurs="0"/>
            <xsd:element name="Time" type="Token_t" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
        A string containing the date and time when an application was built.
        Note that this is not an xsd:dateTime type because this string is
        generated by the compiler and cannot be readily converted to the
        xsd:dateTime format.
        </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="Builder" type="Token_t" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
        The login name of the engineer who created this build.
        </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
     */
    
    public static String ELEMENT_TYPE = "Type";
    public static String ELEMENT_TIME = "Time";
    public static String ELEMENT_BUILDER = "Builder";
    private Version _version;
    private String _time;
    private String _type;
    private String _builder;
    public static final String ELEMENT_BUILD = "Build";
    
    public Build(AbstractTcxObject parent) {
        super(parent);
    }

    @Override
    protected void startElement(String elementName, Attributes attributes) {
        if (Version.ELEMENT_VERSION.equals(elementName)) {
            _version = new Version(this);
            _current = _version;
        }
    }

    @Override
    protected void endElement(String elementName) {
        if (ELEMENT_TIME.equals(elementName)) {
            _time = getLastCharacters();
        } else if (ELEMENT_TYPE.equals(elementName)) {
            _type = getLastCharacters();
        } else if (ELEMENT_BUILDER.equals(elementName)) {
            _builder = getLastCharacters();
        } else if (ELEMENT_BUILD.equals(elementName)) {
            _current = _parent;
        }
    }

    @Override
    protected String toXml(int indent, String indentString) {
        StringBuilder builder = new StringBuilder();
        builder.append(XmlUtil.getIndent(indent, indentString));
        builder.append("<").append(ELEMENT_BUILD).append(">\n");
        indent++;
        if (_version != null) {
            builder.append(_version.toXml(indent, indentString));
        }
        if (_type != null) {
            builder.append(XmlUtil.getIndent(indent, indentString));
            builder.append(XmlUtil.buildCdataTag(ELEMENT_TYPE, _type));
        }
        
        if (_time != null) {
            builder.append(XmlUtil.getIndent(indent, indentString));
            builder.append(XmlUtil.buildCdataTag(ELEMENT_TIME, _time));
        }
        
        if (_builder != null) {
            builder.append(XmlUtil.getIndent(indent, indentString));
            builder.append(XmlUtil.buildCdataTag(ELEMENT_BUILDER, _builder));
        }
        indent--;
        builder.append(XmlUtil.getIndent(indent, indentString));
        builder.append("</").append(ELEMENT_BUILD).append(">\n");
        return builder.toString();
    }

}
