input=C:/GITRoot/Biliruben/transformerSrc/biliruben/tools/CSVtoXML.csv
template=C:/GITRoot/Biliruben/transformerSrc/biliruben/tools/CSVtoXML.xml
# directives is an optional property. When not present, all directives are inferred. When present, only
# the defined directives are applied.
#directives=identityName,linkNativeIdentity,linkDisplayName

source=csv
target=xml

# This indicates the CSV column that distinguishes one document from another
# document=name
# Instead of the CSV column to distinguish the object, use a Directive
documentDirective=identityName

# Default operation. Operation choices are:
# 'update': The matched Node is updated with the target value. If the xpath is a property or text, the value
#           over written. If it is an element, nothing happens if the element already exists
# 'append': The xpath defines a Node to be added to the parent Node.
# 'upateOrAppend': Update will do nothing if the XPath is not found. UpdateorAppend will 
#                  fall back to an append if no Node is found.
# 'appendUnique': Look for this xpath and if it already exists, do nothing. If it doesn't
#                 exist, then create and add it.
# Feels like for @Attr, updateOrAppend and appendUnique are synonymous
directive.operation=update

# Default source. Source choices are:
# 'data': the accompaning CSV file provides the data
# 'literal': the value property will be used as a literal value
directive.source=data

# Updates the @name attribute on <Identity/>
directive.identityName.path=/sailpoint/Identity/@name
directive.identityName.value=name

# Sets the displayName in the template Attributes map. Since there's
# only one entry, we can cheat on this and not correlate it to an
# entry with a corresponding '@key' (i.e. it doesn't need a parent defined
# since it's the only item in this xpath)
directive.identityDisplay.path=/sailpoint/Identity/Attributes/Map/entry/@value
directive.identityDisplay.value=displayName
directive.identityDisplay.operation=update

# Updates the @identity attribute on <Link/>
directive.linkNativeIdentity.path=/sailpoint/Identity/Links/Link/@identity
directive.linkNativeIdentity.value=linkNativeIdentity
# This directive will be applied mulitple times for the same data. It needs to be appended
# per unique nativeIdentity (@identity). Use operation "appendUnique" (this is a common pattern
directive.linkNativeIdentity.operation=appendUnique

# Sets the DisplayName for the correlated Link/@identity
# Feature idea: Since I know the parent directive, I should be
#               able to define relative XPaths. This could simply
#               be defined as '@displayname'
directive.linkDisplayName.path=/sailpoint/Identity/Links/Link/@displayname
directive.linkDisplayName.parent=linkNativeIdentity
directive.linkDisplayName.value=linkDisplayName
directive.linkDisplayName.operation=appendUnique

# ApplicationRef
directive.linkApplicationName.path=/sailpoint/Identity/Links/Link/ApplicationRef/Reference/@name
directive.linkApplicationName.value=application
directive.linkApplicationName.operation=appendUnique
directive.linkApplicationName.parent=linkNativeIdentity

# This is a static value that all <Link/> elements get
directive.entitlementsStatic.path=/sailpoint/Identity/Links/Link/@entitlements
directive.entitlementsStatic.value="true"
directive.entitlementsStatic.parent=linkNativeIdentity
directive.entitlementsStatic.source=literal
directive.entitlementsStatic.opeation=update

# email attribute key
directive.linkAttributeAdminKey.path=/sailpoint/Identity/Links/Link/Attributes/Map/entry/@key
directive.linkAttributeAdminKey.value=email
directive.linkAttributeAdminKey.source=literal
directive.linkAttributeAdminKey.operation=appendUnique
directive.linkAttributeAdminKey.parent=linkNativeIdentity
# Example of parentPath: parent defines the parent Directive which is vital
#     in locating the corresponding Element. However, the true "parent" Element
#     for this Node is a <Map>, not a <Link> as the parent Directive would suggest.
#     So we provide a means to pinpoint the actual parent Element when it doesn't
#     directly correlate to the Node defined by the parent Directive.
directive.linkAttributeAdminKey.parentPath=/sailpoint/Identity/Links/Link/Attributes/Map

# email attribute value
directive.linkAttributeAdminValue.path=/sailpoint/Identity/Links/Link/Attributes/Map/entry/@value
# since the parent is 'linkAttributeAdminKey', we don't have to specify a parentPath
#     property here.
directive.linkAttributeAdminValue.parent=linkAttributeAdminKey
directive.linkAttributeAdminValue.operation=appendUnique
directive.linkAttributeAdminValue.value=email

# Multi-valued String List example - Defines the attribute
directive.linkAttributeMultiValue.path=/sailpoint/Identity/Links/Link/Attributes/Map/entry/@key
directive.linkAttributeMultiValue.operation=appendUnique
directive.linkAttributeMultiValue.source=literal
directive.linkAttributeMultiValue.value=multiValued
directive.linkAttributeMultiValue.parent=linkNativeIdentity
directive.linkAttributeMultiValue.parentPath=/sailpoint/Identity/Links/Link/Attributes/Map

# Multi-valued String List example - Defines the String List
directive.linkAttributeMultiValueData.path=/sailpoint/Identity/Links/Link/Attributes/Map/entry/value/List/String/text()
directive.linkAttributeMultiValueData.parent=linkAttributeMultiValue
directive.linkAttributeMultiValueData.parentPath=/sailpoint/Identity/Links/Link/Attributes/Map/entry/value/List
directive.linkAttributeMultiValueData.value=multiValueDataText
directive.linkAttributeMultiValueData.operation=append